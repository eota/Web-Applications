{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ej/Documents/CSE183/Assignment6/src/Table.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport emails from './data/emails.json';\nimport OutlinedCard from './Card.js';\nconst trash = emails.filter(x => x.trash === true);\nconst inbox = emails.filter(x => x.trash === false || x.trash == undefined);\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 300\n  }\n});\n/**\n * Using https://www.tutorialspoint.com/\n * How-to-calculate-the-difference-between-two-dates-in-JavaScript\n *\n * @param {date} emailDate unformatted email date string\n *\n * @return {object} Formatted date string\n */\n\nfunction dateOutput(emailDate) {\n  const d = new Date(emailDate);\n  const today = new Date();\n  const timeDiff = today.getTime() - d.getTime();\n  const daysDiff = timeDiff / (1000 * 3600 * 24);\n  let output = '';\n  const arrMonths = [];\n  arrMonths[0] = 'Jan';\n  arrMonths[1] = 'Feb';\n  arrMonths[2] = 'Mar';\n  arrMonths[3] = 'Apr';\n  arrMonths[4] = 'May';\n  arrMonths[5] = 'June';\n  arrMonths[6] = 'July';\n  arrMonths[7] = 'Aug';\n  arrMonths[8] = 'Sept';\n  arrMonths[9] = 'Oct';\n  arrMonths[10] = 'Nov';\n  arrMonths[11] = 'Dec';\n\n  if (daysDiff < 1) {\n    if (d.getMinutes() < 10) {\n      output = d.getHours() + ':0' + d.getMinutes();\n    } else {\n      output = d.getHours() + ':' + d.getMinutes();\n    }\n  } else if (daysDiff >= 1 && daysDiff < 365) {\n    output = arrMonths[d.getMonth()] + ' ' + d.getDate();\n  } else if (daysDiff >= 365) {\n    output = d.getFullYear();\n  }\n\n  return output;\n}\n/**\n * @param {object} e email to get contents for\n */\n\n\nfunction getEmail(e) {\n  try {} catch (e) {\n    console.log('Error: ' + e);\n  }\n}\n\nBasicTable.propTypes = {\n  tableMode: PropTypes.string\n};\n/**\n * Using https://material-ui.com/components/tables/\n *\n * @return {object} a JSX object\n */\n\nexport default function BasicTable({\n  tableMode\n}) {\n  _s();\n\n  const classes = useStyles();\n  let tableContents = inbox;\n\n  if (tableMode == 'Inbox') {\n    tableContents = inbox;\n  } else if (tableMode == 'Trash') {\n    tableContents = trash;\n  } else {\n    console.log('tableContents error');\n  }\n\n  const sortedInbox = tableContents.sort(function (a, b) {\n    return new Date(b.received).getTime() - new Date(a.received).getTime();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        \"aria-label\": \"simple table\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: sortedInbox.map(email => /*#__PURE__*/_jsxDEV(TableRow, {\n            onClick: () => console.log('wew'),\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: email.from\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: email.subject\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: dateOutput(email.received)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)]\n          }, email.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OutlinedCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(BasicTable, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = BasicTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"sources":["/Users/ej/Documents/CSE183/Assignment6/src/Table.js"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableRow","Paper","PropTypes","emails","OutlinedCard","trash","filter","x","inbox","undefined","useStyles","table","minWidth","dateOutput","emailDate","d","Date","today","timeDiff","getTime","daysDiff","output","arrMonths","getMinutes","getHours","getMonth","getDate","getFullYear","getEmail","e","console","log","BasicTable","propTypes","tableMode","string","classes","tableContents","sortedInbox","sort","a","b","received","map","email","from","subject","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport emails from './data/emails.json';\nimport OutlinedCard from './Card.js';\n\nconst trash = emails.filter((x) => x.trash === true);\nconst inbox = emails.filter((x) => x.trash === false || x.trash == undefined);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 300,\n  },\n});\n\n/**\n * Using https://www.tutorialspoint.com/\n * How-to-calculate-the-difference-between-two-dates-in-JavaScript\n *\n * @param {date} emailDate unformatted email date string\n *\n * @return {object} Formatted date string\n */\nfunction dateOutput(emailDate) {\n  const d = new Date(emailDate);\n  const today = new Date();\n  const timeDiff = today.getTime() - d.getTime();\n  const daysDiff = timeDiff / (1000 * 3600 * 24);\n  let output = '';\n  const arrMonths = [];\n  arrMonths[0] = 'Jan';\n  arrMonths[1] = 'Feb';\n  arrMonths[2] = 'Mar';\n  arrMonths[3] = 'Apr';\n  arrMonths[4] = 'May';\n  arrMonths[5] = 'June';\n  arrMonths[6] = 'July';\n  arrMonths[7] = 'Aug';\n  arrMonths[8] = 'Sept';\n  arrMonths[9] = 'Oct';\n  arrMonths[10] = 'Nov';\n  arrMonths[11] = 'Dec';\n\n  if (daysDiff < 1) {\n    if (d.getMinutes() < 10) {\n      output = d.getHours() + ':0' + d.getMinutes();\n    } else {\n      output = d.getHours() + ':' + d.getMinutes();\n    }\n  } else if (daysDiff >= 1 && daysDiff < 365) {\n    output = arrMonths[d.getMonth()] + ' ' + d.getDate();\n  } else if (daysDiff >= 365) {\n    output = d.getFullYear();\n  }\n\n  return output;\n}\n\n/**\n * @param {object} e email to get contents for\n */\n function getEmail(e) {\n   try {\n     \n   } catch (e) {\n     console.log('Error: ' + e);\n   }\n }\n\nBasicTable.propTypes = {\n  tableMode: PropTypes.string,\n};\n\n/**\n * Using https://material-ui.com/components/tables/\n *\n * @return {object} a JSX object\n */\nexport default function BasicTable({tableMode}) {\n  const classes = useStyles();\n  let tableContents = inbox;\n  if (tableMode == 'Inbox') {\n    tableContents = inbox;\n  } else if (tableMode == 'Trash') {\n    tableContents = trash;\n  } else {\n    console.log('tableContents error');\n  }\n\n  const sortedInbox = tableContents.sort(function(a, b) {\n    return new Date(b.received).getTime() - new Date(a.received).getTime();\n  });\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableBody>\n            {sortedInbox.map((email) => (\n              <TableRow key={email.id} onClick={() => console.log('wew')}>\n                <TableCell align=\"left\">{email.from}</TableCell>\n                <TableCell align=\"left\">{email.subject}</TableCell>\n                <TableCell align=\"left\">{dateOutput(email.received)}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <OutlinedCard />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}